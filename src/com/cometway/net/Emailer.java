package com.cometway.net;import com.cometway.email.*;import com.cometway.net.*;import com.cometway.util.*;import java.util.*;import java.net.*;/** * This subclass of Thread sends Email using the ESMTPSender class. * This Thread will sleep until the send(IMessage) method is called, which * causes the Thread to wake up. Upon wakeup, the Thread checks the queue * for IMessages to send and sends them. Messages that return an error when * attempting to deliver the message will be dropped from the queue. If the * SMTP host which this Thread uses to relay the message is down, all the * messages are added back into the Queue. The mesage queue has a max size of * 500 messages. */public class Emailer extends Thread{   // Vector of messages to send (queue)   private Vector messages;   // local copy of defualt SMTP server   private String smtpHost;	// The sync objects for checking and modifying the messages vector	private Object vectorSync;	// This flag stops the Emailer	private boolean stopRunning;   /**    * Setup with default SMTP server, instantiates a new messages Vector and starts thread.    * The Emailer uses SocketManager Sockets.    * @param smtphost This is the SMTP server all email will be sent from.    * @param waitTime This is the time in seconds that the Emailer will sleep between connections to the mail server    */   public Emailer(String smtphost,int waitTime)   {      super();		vectorSync = new Object();      smtpHost = smtphost;      messages = new Vector();      this.setName("Emailer");      start();   }   /**     * Puts IMessage into the Vector of messages to be sent.    * @param m the IMessages to be sent. Assumed IMessage includes from, to and subject fields.    */   public void send(IMessage m)   {		if(messages.size()>500) {			synchronized (vectorSync) {				if(messages.size()>500) {					messages.removeElementAt(0);				}			}		}		messages.addElement(m);		synchronized (vectorSync) {			vectorSync.notifyAll();		}			   }   /** 	 *infinite loop, every 5 seconds it checks vector for IMessages. If found, sends them    */   public void run()   {      while(!stopRunning) {			// Look inifinitely, catch unexpected expcetions here so Emailer can continue running			try {				if(messages.size()>0) {					Thread.sleep(2000);					// There are messages to be send.					synchronized (vectorSync) {						if(messages.size()==1) {							print("There are at least 1 message that needs to be sent.");						}						else {							print("There are at least "+messages.size()+" messages that need to be sent.");						}					}					// Get a socket from the socket manager					Socket mailSock = null;					try {						//						mailSock = SocketManager.getManager().getSocket(smtpHost,25);						mailSock = new Socket(smtpHost,25);						mailSock.setSoTimeout(5000);					}					catch(Exception e) {						print("Exception caught while opening mail socket: "+e.toString());						mailSock = null;					}					if(mailSock != null) {						// Connect						//						SMTPClient mail = new SMTPClient("alien.com.cometway.com",smtpHost);						ESMTPSender mail = new ESMTPSender(mailSock);		  						//						mail.connect();						//	       print("connected to smtp host "+smtpHost);		  						//						if(mail.sendHello()<0) {						if(!mail.sendHelo()) {							print("cannot communicate with server.");						}						else {							boolean ok = true;							int count = 0;							Vector tmpMessages = new Vector();							synchronized (vectorSync) {								Enumeration e = messages.elements();								while(e.hasMoreElements()) {									tmpMessages.addElement(e.nextElement());								}								messages.removeAllElements();							}							Enumeration e = tmpMessages.elements();							// Send messages one at a time, RSET between each message							while(e.hasMoreElements()) {								ok = true;								IMessage m = (IMessage)e.nextElement();								count++;								if((m.getHeaderInfo("From").equals(""))||(m.getHeaderInfo("To").equals(""))) {									print("No headers found in message: "+m);									ok = false;								}								else {									if(!mail.sendMessage(m)) {										print("error sending message.");										ok = false;									}									else {										print("Message number: "+count+", successfully sent");										if(!mail.sendRset()) {											print("error reseting smtp state.");											ok = false;										}									}								}								if(!ok) {									print("Lost contact with SMTP host, will resend messages later.");									// Message was not sent, put back in queue									send(m);									while(e.hasMoreElements()) {										send((IMessage)e.nextElement());									}								}							}							if(ok) {								print("All messages sent.");								mail.disconnect();							}							else {								print("Storing messages in queue to send later.");							}							// MUST release sockets!							try {								//SocketManager.releaseSocket(mailSock);								mailSock.close();							}							catch(Exception ex) {								print("exception caught releasing mail socket: "+ex.toString());							}							print("Disconnected from SMTP host");						}					}					else {						print("cannot connect to smtp host: "+smtpHost);					}				}			}			catch(Exception ex) {				print("Exception caught in polling loop: "+ex.toString());			}			try {				synchronized (vectorSync) {					if(messages.size()==0) {						vectorSync.wait();					}				}			}			catch(Exception exc) {				print("exception caught while waiting: "+exc.toString());			}      }				synchronized (vectorSync) {			vectorSync.notifyAll();		}   }   /**    * Print method.    */   public void print(String s)   {      System.out.println("Emailer: "+s);   }   public static void main(String[] args)    {      Emailer em = new Emailer("buzzy.com.cometway.com",5);      while(true) {			try {				sleep(1000);			}			catch(Exception e) {;}			Message m = new Message();			m.setHeaderInfo("from","jonlin@com.cometway.com");			m.setHeaderInfo("to","jonlin@andrew.cmu.edu");			m.setHeaderInfo("subject","test");			m.setMessage("This is the message\nThis is the message\nThis is the message\nThis is the message\nThis is the message\n");	 			System.out.println("sent message to Emailer");			em.send(m);      }   }}
package com.cometway.httpd;

import com.cometway.ak.AgentRequest;
import com.cometway.jdbc.JDBCAgent;
import com.cometway.props.PropsContainer;
import com.cometway.util.StringTools;
import com.cometway.util.UniqueIDInterface;

import java.net.InetAddress;
import java.text.SimpleDateFormat;
import java.util.Date;

public class DatabaseWebServerLogger extends DefaultWebServerLogger
{
	String[] logFields = null;

	/**
	 * <pre> 
	 * Initializes this agent's properties by providing default
	 * values for each of the following missing properties:
	 * (default: log_), "logs_per_file" specifies the maximum
	 * log entries per file (default: 10000), "log_to_file" determines
	 * whether or not to log to a file as well as the database.
	 *
	 * The log_format is a String that determines the format of the lines in the log file.
	 * Formatting strings are represented with a '%' followed by a keyword. Anything else
	 * will be considered literal. The supported % codes are as follows:
	 *   %a          Remote IP Address.
	 *   %D          The time taken to serve the request, in microseconds.
	 *   %h          Remote hostname.
	 *   %{field}i   The value of the request header field named 'field'. If that field doesn't
	 *               exist, a '-' will be used. For example: %{Referer}i
	 *   %m          The request method.
	 *   %q          The query string (prepended with a ? if a query string exists, otherwise an empty string).
	 *   %r          First line of request
	 *   %{name}R    The value of the property named 'name' in the AgentRequest. If that field
	 *               doesn't exist, a '-' will be used. For example: %{page_name}R
	 *   %s          The HTTP response code for the request (or status).
	 *   %S          A readable string of the status of the HTTP handler that handled the request.
	 *   %t          Time the request was received (standard english format).
	 *   %U          The URL path requested, not including any query string.
	 *   %v          The name of the server the request was for (equivalent to %{Host}i).
	 *   %%          A literal for '%'.
	 *
	 * Database specific fields:
	 *  jdbc_agent: the service name of the JDBCAgent
	 *  database_table_name: the name of the table to insert log records into
	 *  log_failures_to_database: If true, connection failures, certain timeouts, or unable
	 *                            to handle requests.
	 *  log_fields: a comma separated list of properties to insert into the log table.
	 *              These properties are found in the AgentRequest, if they don't exist
	 *              in the AgentRequest, then nothing is inserted. There are special fields
	 *              that are specific to the HTTP request header fields:
	 *                __return_value: The return value of the request. The database column is
	 *                                assumed to be named "return_value:.
	 *                __cgi_parameters: The entirety of all the CGI parameters in both the URI
	 *                                  and in the POST body. The database column is assumed to
	 *                                  be named "cgi_parameters".
	 *                __latency: The time it took to handle the HTTP request. The database column
	 *                           is assumed to be "latency".
	 *                __client_ip: The IP address of the connecting client. The database column
	 *                             is assumed to be "client_ip".
	 *                __path: The URI path that was requested. The database column is assumed
	 *                        to be "path".
	 *                __host: The "Host" field in the HTTP request header. The database column is
	 *                        assumed to be "host".
	 *                __referer: The "Referer" field in the HTTP request header. The database column
	 *                           is assumed to be "referer".
	 *                __referrer: The "Referer" field in the HTTP request header. The database column
	 *                            is assumed to be "referrer". Note that this is the same as 
	 *                            "__referer" but with alternate spelling.
	 *                __user_agent: The "User-Agent" field in the HTTP request header. The database
	 *                              column is assumed to be named "user_agent".
	 *  dont_log_cgi_params_list: A comma separated list of CGI params that will not get logged if
	 *                            the cgi params are to be logged. Otherwise this property is ignored.
	 *  table_index_column: This is the name of the index column in the logs table in the
	 *                      database. If this property is left blank, it is assumed that the
	 *                      table has an auto-incrementing index or no index at all. If an
	 *                      index column name is provided, then a unique ID is generated by the
	 *                      unique ID service.
	 *  max_column_size: This is the max length of any of the columns in the log table. If anything 
	 *                   is to be inserted into the table exceeds this length, it will be truncated.
	 *  id_service: The service name of the unique ID service used for generating a unique ID for
	 *              database inserts (if needed).
	 *  timestamp_column: This is the name of the column in the logs table in the database that is
	 *                    used to store timestamps. If blank, no timestamp information will be stored.
	 *                    otherwise the request date will be inserted into that column. It is assumed
	 *                    the column is of some date/time type. If there are more than one timestamp
	 *                    columns, you can use commas to separate their column names.
	 * </pre>
	 */

	public void initProps()
	{
		setDefault("service_name","logger_agent");
		setDefault("log_to_file","true");
		setDefault("log_file_dir", "./");
		setDefault("log_file_date_format", "yyyyMMdd-HHmmss");
		setDefault("log_file_suffix", ".log");
		setDefault("logs_per_file","10000");

		// The JDBCAgent that INSERT queries will be sent to
		setDefault("jdbc_agent","jdbc_agent");

		// The table name to insert log data to
		setDefault("database_table_name","logging");

		// whether or not to log failures
		setDefault("log_failures_to_database","true");

		// The properties in the agent request to insert into, comma separated.
		// Special fields that are specific to the actual HTTP request header:
		//   __return_value
		//   __cgi_parameters
		//   __latency
		//   __client_ip
		//   __path
		//   __host
		//   __referer (or __referrer)
		//   __user_agent
		setDefault("log_fields","");

		// This is a list of CGI params that will NOT get logged
		setDefault("dont_log_cgi_params_list","password");

		// This is the max length of any of the columns in the log table. If anything is to be inserted into the
		// table exceeds this length, it will be truncated.
		setDefault("max_column_size","250");

		// The table ID index, if one exists. If this is non-empty, a unique ID will be generated and used for the insert
		setDefault("table_index_column","");

		setDefault("id_service", "unique_id");

		setDefault("timestamp_column","created,modified");
	}

	public void start()
	{
		logFields = StringTools.commaToArray(getString("log_fields"));

		super.start();
	}

	/**
	 * Inherited from DefaultWebServerLogger.
	 */
	public String createLogString(AgentRequest request)
	{
		doDatabaseInsert(request);

		if(getBoolean("log_to_file")) {
			return(super.createLogString(request));
		}
		else {
			return("");
		}
	}

	/**
	 * This method takes the AgentRequest and performs the database SQL INSERT into the log table.
	 */
	protected void doDatabaseInsert(AgentRequest request)
	{
		StringBuffer sql = new StringBuffer();
		StringBuffer names = new StringBuffer();
		StringBuffer values = new StringBuffer();
		boolean insert = false;
		sql.append("INSERT INTO ");
		sql.append(getString("database_table_name"));
		sql.append(" ");

		// These are properties set by the ConnectionKMethod
		//
		// True if the connection to the client timed out after a keep-alive. If this is true, we typically 
		// don't log anything as it's just normal client/server operation.
		boolean keepAliveTimedOut = request.getBoolean("logger:keepAliveTimedOut");

		// True if the connection timed out and the server was expecting input
		boolean timedOut = request.getBoolean("logger:timedOut");

		// This is the entire HTTP request sent by the client.
		String httpReqStr = request.getString("logger:http_request");

		if(request.getBoolean("logger:success")) {
			if(!keepAliveTimedOut) {
				insert = setLogFields(request,names,values);
			}
		}
		else if(getBoolean("log_failures_to_database")) {
			if(httpReqStr.trim().length()>0 && !keepAliveTimedOut) {
				request.setProperty("logger:returnVal","404");
				
				if(timedOut) {
					request.setProperty("logger:returnVal","408");
				}
				insert = setLogFields(request,names,values);
			}
		}

		if(insert) {
			if(getTrimmedString("table_index_column").length()>0) {
				UniqueIDInterface uuid = (UniqueIDInterface)getServiceImpl(getString("id_service"));
				names.append(",");
				names.append(getTrimmedString("table_index_column"));
				values.append(",'");
				values.append(escapeQuotes(uuid.getNewIDString()));
				values.append("'");
			}
			if(getTrimmedString("timestamp_column").length()>0) {
				Date requestDate = request.getDate("request_date");
				if(requestDate==null) {
					requestDate = new Date();
				}
				SimpleDateFormat dbFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				if(getTrimmedString("timestamp_column").indexOf(",")!=-1) {
					String[] timestamps = StringTools.commaToArray(getTrimmedString("timestamp_column"));
					for(int x=0;x<timestamps.length;x++) {
						names.append(",");
						names.append(timestamps[x]);
						values.append(",'");
						values.append(dbFormat.format(requestDate));
						values.append("'");
					}
				}
				else {
					names.append(",");
					names.append(getTrimmedString("timestamp_column"));
					values.append(",'");
					values.append(dbFormat.format(requestDate));
					values.append("'");
				}
			}

			sql.append("(");
			sql.append(names.toString());
			sql.append(") VALUES (");
			sql.append(values.toString());
			sql.append(")");

			try {
				debug("Log INSERT = "+sql);
				JDBCAgent jdbc = (JDBCAgent) getServiceImpl(getString("jdbc_agent"));
				jdbc.executeUpdate(sql.toString());
			}
			catch(Exception e) {
				error("Error inserting into database",e);
			}
		}
	}

	/**
	 * This method takes the AgentRequest and creates the Strings used in the SQL INSERT's names and values.
	 */
	protected boolean setLogFields(AgentRequest request, StringBuffer names, StringBuffer values)
	{
		boolean insert = false;

		// This is the cgi parameters from the request, if there are any. We may want to include them in the logs.
		String cgiParams = request.getString("logger:cgiParams");
		if(cgiParams!=null && cgiParams.length()>0) {
			cgiParams = removeCGIParams(cgiParams);
		}

		// This is the URI path of the request.
		String path = request.getString("logger:path");

		// This is the return value of the server's response, if there was one.
		String returnVal = request.getString("logger:returnVal");

		// This is the amount of time in milliseconds it took to handle the request.
		int latency = request.getInteger("logger:latency");

		// This is the InetAddress Object associated with the client. 
		InetAddress cachedInetAddress = (InetAddress)request.getProperty("logger:inetAddress");

		// This is the host that the client sends in the "Host" request header field
		String host = "";

		// This is the referer that the client sends in the "Referer" request header field
		String referer = "";

		// This is the user-agent that the client sends in the "User-Agent" request header field
		String useragent = "";

		// This is the PropsContainer created by the ConnectionKMethod which maps all the request header name/value pairs.
		// This is null if no request was sent or if the request was refused outright.
		PropsContainer headerProps = (PropsContainer)request.getProperty("logger:http_headers");

		if(headerProps!=null) {
			host = (String)headerProps.getProperty("host");
			referer = (String)headerProps.getProperty("referer");
			useragent = (String)headerProps.getProperty("user-agent");
		}


		for(int x=0;x<logFields.length;x++) {
			if(logFields[x].equalsIgnoreCase("__return_value")) {
				if(returnVal!=null && returnVal.trim().length()>0) {
					if(names.length()>0) {
						names.append(",");
						values.append(",");
					}
					names.append("return_value");
					values.append("'");
					values.append(escapeQuotes(truncate(returnVal)));
					values.append("'");
					insert = true;
				}
			}
			else if(logFields[x].equalsIgnoreCase("__cgi_parameters")) {
				if(cgiParams!=null && cgiParams.trim().length()>0) {
					if(names.length()>0) {
						names.append(",");
						values.append(",");
					}
					names.append("cgi_parameters");
					values.append("'");
					values.append(escapeQuotes(truncate(cgiParams)));
					values.append("'");
					insert = true;
				}
			}
			else if(logFields[x].equalsIgnoreCase("__latency")) {
				if(names.length()>0) {
					names.append(",");
					values.append(",");
				}
				names.append("latency");
				values.append("'");
				values.append(""+latency);
				values.append("'");
				insert = true;
			}
			else if(logFields[x].equalsIgnoreCase("__client_ip")) {
				if(cachedInetAddress!=null) {
					if(names.length()>0) {
						names.append(",");
						values.append(",");
					}
					names.append("client_ip");
					values.append("'");
					values.append(escapeQuotes(truncate(cachedInetAddress.getHostAddress())));
					values.append("'");
					insert = true;
				}
			}
			else if(logFields[x].equalsIgnoreCase("__path")) {
				if(path!=null && path.trim().length()>0) {
					if(names.length()>0) {
						names.append(",");
						values.append(",");
					}
					names.append("path");
					values.append("'");
					values.append(escapeQuotes(truncate(path)));
					values.append("'");
					insert = true;
				}
			}
			else if(logFields[x].equalsIgnoreCase("__host")) {
				if(host!=null && host.trim().length()>0) {
					if(names.length()>0) {
						names.append(",");
						values.append(",");
					}
					names.append("host");
					values.append("'");
					values.append(escapeQuotes(truncate(host)));
					values.append("'");
					insert = true;
				}
			}
			else if(logFields[x].equalsIgnoreCase("__referer")) {
				if(referer!=null && referer.trim().length()>0) {
					if(names.length()>0) {
						names.append(",");
						values.append(",");
					}
					names.append("referer");
					values.append("'");
					values.append(escapeQuotes(truncate(referer)));
					values.append("'");
					insert = true;
				}
			}
			else if(logFields[x].equalsIgnoreCase("__referrer")) {
				if(referer!=null && referer.trim().length()>0) {
					if(names.length()>0) {
						names.append(",");
						values.append(",");
					}
					names.append("referrer");
					values.append("'");
					values.append(escapeQuotes(truncate(referer)));
					values.append("'");
					insert = true;
				}
			}
			else if(logFields[x].equalsIgnoreCase("__user_agent")) {
				if(useragent!=null && useragent.trim().length()>0) {
					if(names.length()>0) {
						names.append(",");
						values.append(",");
					}
					names.append("user_agent");
					values.append("'");
					values.append(escapeQuotes(truncate(useragent)));
					values.append("'");
					insert = true;
				}
			}
			else {
				if(request.hasProperty(logFields[x])) {
					if(names.length()>0) {
						names.append(",");
						values.append(",");
					}
					names.append(logFields[x]);
					values.append("'");
					values.append(escapeQuotes(truncate(request.getString(logFields[x]))));
					values.append("'");
					insert = true;
				}
			}
		}

		return(insert);
	}


	protected String truncate(String in)
	{
		if(in.length()>getInteger("max_column_size")) {
			in = in.substring(0,getInteger("max_column_size"));
		}
		return(in);
	}

	protected String escapeQuotes(String value)
	{
		int index = value.indexOf('\'');

      while (index != -1)
      {
         value = value.substring(0, index) + "''" + value.substring(index + 1);

         index = value.indexOf('\'',index+2);
      }

      return (value);
   }

}
